import os, requests, socket
import logging
import asyncio
logging.basicConfig(level=logging.INFO)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∏–º–ø–æ—Ä—Ç—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
pending_imports: dict[int, str] = {}

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes
)
from datetime import datetime, UTC
from dateutil.parser import parse as parse_dt

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# export TEST_TG_TOKEN (for CI smoke tests) or TG_TOKEN (for production) in environment
TOKEN = os.environ.get("TEST_TG_TOKEN") or os.environ.get("TG_TOKEN")
if not TOKEN:
    raise RuntimeError("Bot token is not set. Please set TEST_TG_TOKEN or TG_TOKEN.")
API_URL = os.getenv("API_URL", "http://127.0.0.1:8000")

def post_api(endpoint: str, payload: dict) -> bool:
    """
    Helper to POST to the backend API.
    Returns True on HTTP 2xx, False on any exception or non-2xx response.
    """
    try:
        r = requests.post(f"{API_URL}/{endpoint}", json=payload, timeout=1)
        r.raise_for_status()
        return True
    except requests.RequestException:
        return False

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ö—ç–Ω–¥–ª–µ—Ä—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/starttask <ID> [YYYY‚Äëmm‚Äëdd HH:MM] ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É\n"
        "/stoptask <ID> [YYYY‚Äëmm‚Äëdd HH:MM] ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/elapsed ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º (–º–∏–Ω—É—Ç—ã)\n"
        "/import <project_name> ‚Äî –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –∏–º–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞\n"
        "/report <project_name> [table|html] ‚Äî –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ\n"
        "/help ‚Äî –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞"
    )

async def starttask(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not ctx.args:
        await update.message.reply_text("–ù—É–∂–Ω–æ: /starttask <ID> [YYYY-mm-dd HH:MM]")
        return
    task = ctx.args[0]
    ts = None
    if len(ctx.args) > 1:
        # combine all tokens after task as timestamp string
        ts_str = " ".join(ctx.args[1:])
        dt = parse_dt(ts_str)
        # ensure tzinfo for correct ISO output
        if dt.tzinfo is None:
            dt = dt.replace(tzinfo=UTC)
        ts = dt.isoformat()
    if not post_api("start", {"task": task, "ts": ts}):
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        return
    await update.message.reply_text(f"‚ñ∂ Start {task} @ {ts or 'now'}")

async def stoptask(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not ctx.args:
        await update.message.reply_text("–ù—É–∂–Ω–æ: /stoptask <ID> [YYYY-mm-dd HH:MM]")
        return
    task = ctx.args[0]
    ts = None
    if len(ctx.args) > 1:
        ts_str = " ".join(ctx.args[1:])
        dt = parse_dt(ts_str)
        if dt.tzinfo is None:
            dt = dt.replace(tzinfo=UTC)
        ts = dt.isoformat()
    if not post_api("stop", {"task": task, "ts": ts}):
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        return
    await update.message.reply_text(f"‚ñ† Stop  {task} @ {ts or 'now'}")

async def elapsed(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try:
        data = requests.get(f"{API_URL}/elapsed", timeout=1).json()
    except (requests.RequestException, ValueError):
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
        return
    if not data:
        await update.message.reply_text("–ü–æ–∫–∞ –ø—É—Å—Ç–æ")
        return
    text = "\n".join(f"{row['task']:<12} {row['minutes']:>6}" for row in data)
    await update.message.reply_text(text)

async def cmd_import(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not ctx.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /import <project_name>")
        return
    project = ctx.args[0]
    pending_imports[update.effective_chat.id] = project
    await update.message.reply_text(
        f"–û–∫, –∂–¥—É CSV –∏–ª–∏ XLSX —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '{project}'. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    )

async def cmd_report(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    # /report <project_name> [table|html]
    if not ctx.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /report <project_name> [format]")
        return
    project = ctx.args[0]
    fmt = ctx.args[1] if len(ctx.args) > 1 else "table"
    try:
        resp = requests.get(f"{API_URL}/report", params={"project": project, "format": fmt}, timeout=5)
        print(resp.status_code, resp.text)
        resp.raise_for_status()
        import tempfile
        if fmt.lower() == "json":
            import json
            records = resp.json().get("records", [])
            json_text = json.dumps(records, indent=2, ensure_ascii=False)
            with tempfile.NamedTemporaryFile("w+", delete=False, suffix=".json") as f:
                f.write(json_text)
                f.flush()
                f.seek(0)
                await update.message.reply_document(
                    document=f.name,
                    filename=f"{project}_report.json"
                )
            return
        report_text = resp.json().get("report", "")
        # For both HTML and table formats we send the report as a file
        if fmt.lower() in ("html", "table"):
            suffix = ".html" if fmt.lower() == "html" else ".txt"
            with tempfile.NamedTemporaryFile("w+", delete=False, suffix=suffix) as f:
                f.write(report_text)
                f.flush()
                f.seek(0)
                await update.message.reply_document(
                    document=f.name,
                    filename=f"{project}_report{suffix}"
                )
            return  # nothing more to do
        # fallback for other formats: send as chunked Markdown text
        max_len = 4000
        chunks = [report_text[i:i+max_len] for i in range(0, len(report_text), max_len)]
        for part in chunks:
            await update.message.reply_text(f"```\n{part}\n```", parse_mode="Markdown")
    except requests.RequestException:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
    except Exception as ex:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞: {ex}")

async def cmd_list(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    # /list
    try:
        resp = requests.get(f"{API_URL}/projects", timeout=5)
        resp.raise_for_status()
        names = resp.json().get("projects", [])
        if not names:
            text = "–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            text = "\n".join(names)
        await update.message.reply_text(text)
    except requests.RequestException:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤.")

async def cmd_reset(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    # /reset
    try:
        resp = requests.post(f"{API_URL}/reset", json={"force": True}, timeout=5)
        resp.raise_for_status()
        await update.message.reply_text("‚úî Database reset")
    except requests.RequestException:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

async def cmd_help(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n"
        "/starttask <ID> [YYYY‚Äëmm‚Äëdd HH:MM] ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–π—á–∞—Å)\n"
        "/stoptask <ID> [YYYY‚Äëmm‚Äëdd HH:MM] ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–π—á–∞—Å)\n"
        "/elapsed ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º (–º–∏–Ω—É—Ç—ã)\n"
        "/import <project_name> ‚Äî –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –∏–º–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞\n"
        "   1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ `/import <project_name>`\n"
        "   2. –ó–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏—Ç–µ CSV –∏–ª–∏ XLSX —Ñ–∞–π–ª —Å –∑–∞–¥–∞—á–∞–º–∏\n"
        "/report <project_name> [table|html|json] ‚Äî –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É\n"
        "  ‚Ä¢ table ‚Äî .txt‚Äë—Ñ–∞–π–ª —Å summary-–º–µ—Ç—Ä–∏–∫–∞–º–∏ –≤ –Ω–∞—á–∞–ª–µ (–ø—Ä–æ—Å—Ä–æ—á–∫–∏, –Ω–µ–∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏), ascii-–≥—Ä–∞—Ñ–∏–∫–æ–º —Å—Ç–∞—Ç—É—Å–æ–≤, –≤–µ—Ö–∏ (*)\n"
        "  ‚Ä¢ html  ‚Äî .html‚Äë—Ñ–∞–π–ª —Å —Ñ—É—Ç–µ—Ä–æ–º-—Ä–µ–∑—é–º–µ, SVG-–≥—Ä–∞—Ñ–∏–∫–æ–º, summary-–º–µ—Ç—Ä–∏–∫–∞–º–∏, –≤–µ—Ö–∏ (*)\n"
        "  ‚Ä¢ json  ‚Äî .json‚Äë—Ñ–∞–π–ª —Å —Ä–∞—Å—á–µ—Ç–∞–º–∏: –¥–µ–ª—å—Ç–∞, —Å—Ç–∞—Ç—É—Å, —Ñ–ª–∞–≥–∏, is_milestone\n"
        "  ‚ìò –í–µ—Ö–∏ (milestones) –æ—Ç–º–µ—á–µ–Ω—ã –∑–≤—ë–∑–¥–æ—á–∫–æ–π *.\n"
        "–í —Ç–∞–±–ª–∏—á–Ω–æ–º –∏ HTML –æ—Ç—á—ë—Ç–µ —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–µ—Ä–∞—Ä—Ö–∏—è –∑–∞–¥–∞—á (üìÅ –≥—Ä—É–ø–ø—ã, ‚≠ê –≤–µ—Ö–∏), –æ–ø—Ä–µ–¥–µ–ª—è–µ–º–∞—è –ø–æ parent_id, level, is_group –∏ –¥—Ä.\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ (CSV/XLSX):\n"
        "  ‚Ä¢ project ‚Äî –∫–æ–¥/–∏–º—è –ø—Ä–æ–µ–∫—Ç–∞\n"
        "  ‚Ä¢ task_id ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏\n"
        "  ‚Ä¢ summary ‚Äî –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n"
        "  ‚Ä¢ planned_deadline ‚Äî –ø–ª–∞–Ω–æ–≤–∞—è –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (YYYY‚ÄëMM‚ÄëDD)\n"
        "  ‚Ä¢ actual_completion_date ‚Äî —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
        "  ‚Ä¢ duration_days ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–¥–Ω–∏, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
        "  ‚Ä¢ deps ‚Äî –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (id —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
        "  ‚Ä¢ assignee ‚Äî –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
        "  ‚Ä¢ description ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
        "  ‚Ä¢ result ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
        "  ‚Ä¢ status ‚Äî —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
        "  ‚Ä¢ parent_id ‚Äî ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)\n"
        "  ‚Ä¢ is_group ‚Äî –±—É–ª–µ–≤–æ, –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –≥—Ä—É–ø–ø—É –∑–∞–¥–∞—á (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
        "  ‚Ä¢ level ‚Äî —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ)\n"
        "\n"
       "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "  /report demo table ‚Äî —Ç–∞–±–ª–∏—á–Ω—ã–π –æ—Ç—á—ë—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏\n"
        "  /report demo html ‚Äî html-–æ—Ç—á—ë—Ç —Å —Ñ—É—Ç–µ—Ä–æ–º\n"
        "  /report demo json ‚Äî json-–æ—Ç—á—ë—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π\n"
    )
    await update.message.reply_text(text)

from telegram.ext import MessageHandler, filters

async def handle_document(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in pending_imports:
        return  # ignore
    project = pending_imports.pop(chat_id)
    try:
        file_obj = await update.message.document.get_file()
        content = await file_obj.download_as_bytearray()
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª")
        return
    files = {"file": (update.message.document.file_name, content)}
    data = {"name": project}
    try:
        resp = requests.post(f"{API_URL}/import", files=files, data=data, timeout=10)
        resp.raise_for_status()
        result = resp.json()
        count = result.get("imported", '?')
        await update.message.reply_text(f"‚úî Imported {count} tasks into project '{project}'")
    except requests.RequestException:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ")
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∑–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main():
    """Run the Telegram bot with graceful shutdown."""
    # Build application
    app = ApplicationBuilder().token(TOKEN).build()

    # Register handlers
    app.add_handler(CommandHandler("start",      cmd_start))
    app.add_handler(CommandHandler("starttask",  starttask))
    app.add_handler(CommandHandler("stoptask",   stoptask))
    app.add_handler(CommandHandler("elapsed",     elapsed))
    app.add_handler(CommandHandler("import",   cmd_import))
    app.add_handler(CommandHandler("report",   cmd_report))
    app.add_handler(CommandHandler("list",     cmd_list))
    app.add_handler(CommandHandler("reset",    cmd_reset))
    app.add_handler(CommandHandler("help",     cmd_help))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    try:
        # run_polling without internal signal handlers
        app.run_polling(stop_signals=None)
    finally:
        # Ensure all async cleanup completes to avoid 'coroutine was never awaited'
        asyncio.run(app.shutdown())
        print("Bot stopped.")

if __name__ == "__main__":
    try:
        main()
    except (KeyboardInterrupt, SystemExit):
        pass